# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd


def resp_simulate_data(nCycles=100, sampling_rate=1000, breathing_rate=0.25, average_amplitude=0.5, amplitude_variance=0.1, phase_variance=0.1, inhale_pause_percent=0.3, inhale_pause_avgLength=0.2, inhale_pauseLength_variance=0.5, exhale_pause_percent=0.3, exhale_pause_avgLength=0.2, exhale_pauseLength_variance=0.5, pause_amplitude=0.1, pause_amplitude_variance=0.2, signal_noise=0.1):
        """
    Simulates a recording of human airflow data by appending individually constructed sin waves and pauses in sequence.

    Parameters
    ----------
    nCycles : int or float
        number of breathing cycles to simulate.
    sampling_rate : 
        sampling rate.
    breathing_rate : 
        average breathing rate.
    average_amplitude : 
        average amplitude of inhales and exhales.
    amplitude_variance: 
        variance in respiratory amplitudes.
    phase_variance: 
        variance in duration of individual breaths.
    inhale_pause_percent : 
        percent of inhales followed by a pause.
    inhale_pause_avgLength : 
        average length of inhale pauses.
    inhale_pauseLength_variance : 
        variance in inhale pause length.
    exhale_pause_percent : 
        percent of exhales followed by a pause.
    exhale_pause_avgLength : 
        average length of exhale pauses.
    exhale_pauseLength_variance : 
        variance in exhale pause length.
    pause_amplitude : 
        noise amplitude of pauses.
    pause_amplitude_variance : 
        variance in pause noise.
    signal_noise : 
        percent of noise saturation in the simulated signal.

    Returns
    ----------
    
    """
    # Define additional parameters
    sample_phase = sampling_rate / breathing_rate
    inhale_pause_phase = np.round(inhale_pause_avgLength * sample_phase)
    exhale_pause_phase = np.round(exhale_pause_avgLength * sample_phase)
    
    # Normalize variance by average breath amplitude
    amplitude_variance_normed = average_amplitude * amplitude_variance
    amplitudes__with_noise = np.random.randn(1,nCycles) * amplitude_variance_normed + average_amplitude
    
    # Normalize phase by average breath length
    phase_variance_normed = phase_variance * sample_phase
    phases_with_noise = np.round(np.random.randn(1,nCycles) * phase_variance_normed + sample_phase)
    
    # Normalize pause lengths by phase and variation
    inhale_pauseLength_variance_normed = inhale_pause_phase * inhale_pauseLength_variance
    inhale_pauseLengths_with_noise = np.round(np.random.randn(1,nCycles) * inhale_pauseLength_variance_normed + inhale_pause_phase)
    exhale_pauseLength_variance_normed = exhale_pause_phase * exhale_pauseLength_variance
    exhale_pauseLengths_with_noise = np.round(np.random.randn(1,nCycles) * exhale_pauseLength_variance_normed + inhale_pause_phase) ##why inhale pause phase??????????????
    
    # Normalize pause amplitudes
    pause_amplitude_variance_normed = pause_amplitude * pause_amplitude_variance
    
    # Initialize empty vector to fill with simulated data
    resp_simulated = []
    
    # Initialize parameters to save
    inhale_onsets = np.zeros((1,nCycles))
    exhale_onsets = np.zeros((1,nCycles))
    
    inhale_pause_onsets = np.zeros((1,nCycles))
    exhale_pause_onsets = np.zeros((1,nCycles))
    
    inhale_lengths = np.zeros((1,nCycles))
    inhale_pauseLengths = np.zeros((1,nCycles))
    exhale_lengths = np.zeros((1,nCycles))
    exhale_pauseLengths = np.zeros((1,nCycles))
    
    inhale_peaks = np.zeros((1,nCycles))
    exhale_troughs = np.zeros((1,nCycles))
    
    n = 1
    for i in range(nCycles):
        # Determine length of inhale pause for this cycle
        if np.random.rand() < inhale_pause_percent:
            this_inhale_pauseLength = inhale_pauseLengths_with_noise[0, i]
            this_inhale_pause = np.random.rand(1, int(this_inhale_pauseLength))*pause_amplitude_variance_normed
        else:
            this_inhale_pauseLength = 0
            this_inhale_pause = []

        # Determine length of exhale pause for this cycle
        if np.random.rand() < exhale_pause_percent:
            this_exhale_pauseLength = exhale_pauseLengths_with_noise[0, i]
            this_exhale_pause = np.random.rand(1, int(this_exhale_pauseLength))*pause_amplitude_variance_normed
        else:
            this_exhale_pauseLength = 0
            this_exhale_pause = []
        
        # Determine length of inhale and exhale for this cycle to main breathing rate
        cycle_length = phases_with_noise[0, i] - (this_inhale_pauseLength + this_exhale_pauseLength)
        
        # If pauses are longer than the time alloted for this breath, set them to 0 so a real breath can be simulated. This will deviate the statistics from those initialized but is unavaoidable at the current state 
        if cycle_length <= 0:
            if cycle_length < min(phase_with_noise)/4:
                this_inhale_pauseLength = 0
                this_inhale_pause = []
                this_exhale_pauseLength = 0
                this_exhale_pause = []
                cycle_length = phases_with_noise[0, i] - (this_inhale_pauseLength + this_exhale_pauseLength)
        
        # Compute inhale and exhale for this cycle
        this_cycle = np.sin(np.linspace(0, 2*np.pi, cycle_length))*amplitudes__with_noise[0,i]
        half_cycle = np.round(len(this_cycle)/2)
        this_inhale = this_cycle[0:int(half_cycle)]
        this_inhale_length = len(this_inhale)
        this_exhale = this_cycle[int(half_cycle):]
        this_exhale_length = len(this_exhale)
        
        # Save parameters for checking
        inhale_lengths[0,i] = this_inhale_length
        inhale_pauseLengths[0,i] = this_inhale_pauseLength
        exhale_lengths[0,i] = this_exhale_length
        exhale_pauseLengths[0,i] = this_exhale_pauseLength
        inhale_onsets[0,i] = n
        exhale_onsets[0,i] = n + this_inhale_length + this_inhale_pauseLength
        
        if this_inhale_pause:
            inhale_pause_onsets[0,i] = n + this_inhale_length
        else: 
            inhale_pause_onsets[0,i] = np.nan
        
        if this_exhale_pause:
            exhale_pause_onsets[0.i] = n + this_inhale_length + this_inhale_pauseLength + this_exhale_length
        else:
            exhale_pause_onsets[0,i] = np.nan
        
        # Compose breath from parameters
        this_breath = [this_inhale, this_inhale_pause, this_exhale, this_exhale_pause]
        
        # Compute max flow for inhale and exhale for this breath
        max_ID = np.argmax(this_breath)
        min_ID = np.argmin(this_breath)
        inhale_peaks[0,i] = n + max_ID
        exhale_peaks[0,i] = n + min_ID
        
        # Append breath to simulated resperation vector
        resp_simulated
    
    
    
    
    
    return()
