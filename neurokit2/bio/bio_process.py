# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd

from ..ecg import ecg_process
from ..rsp import rsp_process
from ..eda import eda_process
from ..emg import emg_process


def bio_process(ecg=None, rsp=None, eda=None, emg=None, keep=None, sampling_rate=1000):
    """Automated processing of bio signals. Wrapper for other bio processing functions of electrocardiography signals (ECG), respiration signals (RSP), electrodermal activity (EDA) and electromyography signals (EMG).

    Parameters
    ----------
    ecg : list, array or Series
        The raw ECG channel.
    rsp : list, array or Series
        The raw RSP channel (as measured, for instance, by a
        respiration belt).
    eda : list, array or Series
        The raw EDA channel.
    emg : list, array or Series
        The raw EMG channel.
    keep : DataFrame
        Dataframe or channels to add by concatenation to the processed dataframe (for instance, the Photosensor channel).
    sampling_rate : int
        The sampling frequency of the signals (in Hz, i.e., samples/second).
        Defaults to 1000.

    Returns
    ----------
    bio_processed : dict
        Dict containing DataFrames of the following processed bio features:
        - *"ECG"*: the raw signal, the cleaned signal, the heart rate, and the R peaks indexes. Also generated by `ecg_process`.
        - *"RSP"*: the raw signal, the cleaned signal, the rate, and the amplitude. Also generated by `rsp_process`.
        - *"EDA"*: the raw signal, the cleaned signal, the tonic component, the phasic component, indexes of the SCR onsets, peaks, amplitudes, and half-recovery times. Also generated by `eda_process`.
        - *"EMG"*: the raw signal, the cleaned signal, and amplitudes. Also generated by `emg_process`.

    See Also
    ----------
    ecg_process, rsp_process, eda_process, emg_process

    Example
    ----------
    >>> import neurokit2 as nk
    >>>
    >>> bio_processed = nk.bio_process(ecg=ecg_signal, rsp=ecg_signal, eda=eda_signal, emg=emg_signal)
    >>>
    >>> # Visualize all signals
    >>> nk.standardize(bio_processed["df"]).plot()
    """
    bio_processed = {}
    bio_df = pd.DataFrame({})

    # ECG
    if ecg is not None:
        ecg_signals, info = ecg_process(ecg, sampling_rate=sampling_rate)
        bio_processed["ECG"] = ecg_signals[["ECG_Raw", "ECG_Clean", "ECG_Rate", "ECG_R_Peaks"]]
        bio_df = pd.concat([bio_df, ecg_signals[["ECG_Raw", "ECG_Clean", "ECG_Rate", "ECG_R_Peaks"]]], axis=1)

    # RSP
    if rsp is not None:
        rsp_signals, info = rsp_process(rsp, sampling_rate=sampling_rate)
        bio_processed["RSP"] = rsp_signals[["RSP_Raw", "RSP_Clean", "RSP_Rate", "RSP_Amplitude"]]
        bio_df = pd.concat([bio_df, rsp_signals[["RSP_Raw", "RSP_Clean", "RSP_Rate", "RSP_Amplitude"]]], axis=1)

    # EDA
    if eda is not None:
        eda_signals, info = eda_process(eda, sampling_rate=sampling_rate)
        bio_processed["EDA"] = eda_signals[["EDA_Raw", "EDA_Clean", "EDA_Tonic", "EDA_Phasic", "SCR_Onsets", "SCR_Peaks", "SCR_Amplitude", "SCR_Recovery"]]
        bio_df = pd.concat([bio_df, eda_signals[["EDA_Raw", "EDA_Clean", "EDA_Tonic", "EDA_Phasic", "SCR_Onsets", "SCR_Peaks", "SCR_Amplitude", "SCR_Recovery"]]], axis=1)

    # EMG
    if emg is not None:
        emg_signals = emg_process(emg, sampling_rate=sampling_rate)
        bio_processed["EMG"] = emg_signals[["EMG_Raw", "EMG_Clean", "EMG_Amplitude"]]
        bio_df = pd.concat([bio_df, emg_signals[["EMG_Raw", "EMG_Clean", "EMG_Amplitude"]]], axis=1)

    # Additional channels to keep
    if keep is not None:
        keep = keep.reset_index(drop=True)
        bio_df = pd.concat([bio_df, keep], axis=1)
    bio_processed["df"] = bio_df

    return(bio_processed)
